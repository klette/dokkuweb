#!/bin/bash
# HTTP POST and GET params in an associative array
declare -A GET_PARAMS
declare -A POST_PARAMS
declare REMOTE_USER

do_405() {
  echo "Status: 405 Method Not Allowed"
  echo ""
  cat <<JSON
{
    "error": "No handle for $REQUEST_METHOD"
}
JSON
}

# Serialize JSON -- the proper way
# Arguments:
# $1 - an associative array to be printed
# $2 - whether to put quotes around objects (default false)
echo_json_array() {
  local last_idx i quote=${2}
  declare -a arr=("${!1}")
  last_idx=$((${#arr[@]} - 1))

  echo -n "["
  for i in "${!arr[@]}"; do
    if [[ "$quote" ]]; then
      echo -n "\"${arr[$i]}\""
    else
      echo -n "${arr[$i]}"
    fi
    if [[ ! "$i" = "$last_idx" ]]; then
        echo -n ","
    fi
  done
  echo -n "]"
}

read_POST_vars() {
  if [[ "$REQUEST_METHOD" = "POST" ]] && [[ ! -z "$CONTENT_LENGTH" ]]; then
    read -n $CONTENT_LENGTH QUERY_STRING_POST
  fi
}

parse_POST_params() {
  local q p k v

  if [[ ! "${QUERY_STRING_POST}" ]]; then
    return
  fi

  q="${QUERY_STRING_POST}&"

  while [[ ! -z "$q" ]]; do
    p="${q%%&*}"  # get first part of query string
    k="${p%%=*}"  # get the key (variable name) from it
    v="${p#*=}"   # get the value from it
    q="${q#$p&*}" # strip first part from query string

    POST_PARAMS["${k}"]="${v}"
  done
}

parse_GET_params() {
  local q p k v

  if [[ ! "${QUERY_STRING}" ]]; then
    return
  fi

  q="${QUERY_STRING}&"

  while [[ ! -z "$q" ]]; do
    p="${q%%&*}"  # get first part of query string
    k="${p%%=*}"  # get the key (variable name) from it
    v="${p#*=}"   # get the value from it
    q="${q#$p&*}" # strip first part from query string

    GET_PARAMS["${k}"]="${v}"
  done
}

parse_username() {
  REMOTE_USER=$(echo $X_AUTHORIZATION \
                | sed 's,Basic ,,' \
                | base64 -d \
                | cut -d ":" -f1)
}

read_POST_vars
parse_POST_params
parse_GET_params
parse_username
